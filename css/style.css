/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/

/*  
Making a basic reset using universal selector (*) 
*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
        rgba(126, 213, 111, 0.82),
        rgba(40, 180, 133, 0.82)),
        url(../img/hero.jpg);
    background-size: cover;
    background-position: top ;
    position: relative;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); /*Clips the element to the desired shape*/
}

.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    height: 35px;
}

.text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%,-50%); /*Makes sure the elements are centred */ 
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    backface-visibility: hidden; /*Fixes the little shaking that happens in the animation*/
    margin-bottom: 60px;
}

.heading-primary-main {
    display: block;    /*Displays inline text as block(Line breaks) - different lines*/
    font-weight: 400;
    font-size: 60px;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1s;
    
    
    /*
    animation-delay: 3s; /*Animation doesn't start until the specified time
    animation-iteration-count:3; /*Animation happens 3 times
    animation-timing-function: ease-out; /*Defines how animation will preceed- how fast or slow*/
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.3px;

    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    0% { /*When animation starts*/
        opacity: 0; /*Makes it invisible at the beginning of animation*/
        transform: translateX(-100px); /*Moves text from left to right*/
    }

    80% {
        transform: translateX(10px); /*Move text to the right side at 80%*/
    }

    100% { /*When animation finishes*/
        opacity: 1; /*Returns the default text*/
        transform: translate(0); /*Positions the text where it was initially*/
    }
}

@keyframes moveInRight {
    0% { /*When animation starts*/
        opacity: 0; /*Makes it invisible at the beginning of animation*/
        transform: translateX(100px); /*Moves text from right to left*/
    }

    80% {
        transform: translateX(-10px); /*Moves text to the left side at 80%*/
    }

    100% { /*When animation finishes*/
        opacity: 1; /*Returns the default text*/
        transform: translate(0); /*Positions the text where it was initially*/
    }
}

@keyframes moveInBottom {
    0% { /*When animation starts*/
        opacity: 0; /*Makes it invisible at the beginning of animation*/
        transform: translateY(30px); /*Moves text from bottom to top*/
    }

    100% { /*When animation finishes*/
        opacity: 1; /*Returns the default text*/
        transform: translate(0); /*Positions the text where it was initially*/
    }
}

.btn:link,
.btn:visited { /*link and visited are pseudo classes-special states of a selector. We use them to style elements under special conditions*/
    text-transform: uppercase;
    text-decoration: none; /*Removes the color of link and underline*/
    padding: 15px 40px;
    display: inline-block; /*This makes the padding functional*/
    border-radius: 100px;
    transition: all .2s; /*We use this for animations, we set it here but the animation will happen in the hover and active below*/
    position: relative;
} /*We want the visited state to look the same as the normal state of the link*/

.btn:hover { /*hover is another pseudo class. We use it to select a different and special state of the button element*/
    transform: translateY(-3px); /*Moves up*/
    box-shadow: 0 10px 20px rgba(0,0,0,.2); /*box-shadow: x y blur color*/
}

.btn:active { /*Happens when we click*/
    transform: translateY(-1px); /*-1px in relation to the link state*/
    box-shadow: 0 5px 10px rgba(0,0,0,.2);
}

.btn-white {
    background-color: #fff;
    color: #777;
}

.btn::after { /*After pseudo element adds like a virtual element right after the element we're selecting and we can then style that element*/
    content: "";/*Important, has to be there*/
    display: inline-block;/*Important, has to be there*/
    height: 100%;/*Child of the button*/
    width: 100%;/*100% of the button*/
    border-radius: 100px;
    position: absolute; /*Puts it behind actual btn. NB Relative has to be there for the btn*/
    top: 0;
    left: 0;
    z-index: -1;/*Defines position of elements if they're one on top of the other*/
    transition: all .4s; /*Defines animation*/
}

.btn-white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6); /*Makes element bigger in width and height*/
    opacity: 0; /*Makes it somehow invisible- FADE OUT*/
}

.btn-animated {
    animation: moveInBottom .5s ease-out .75s; /*animation: name duration timing-fn delay*/
    animation-fill-mode: backwards; /*Automatically applies the styles upto 0% b4 the animation starts- makes the btn start as invisible*/
}